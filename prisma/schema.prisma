generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String          @id @default(cuid())
  username         String          @unique
  name             String?
  email            String          @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  phone            String?         @unique
  mobileVerified   DateTime?
  role             UserRole        @default(BUYER)
  isAdmin          Boolean         @default(false)
  licenseNumber    String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  companyName      String?
  accounts         Account[]
  forumPosts       ForumPost[]
  forumReplies     ForumReply[]
  postReactions    PostReaction[]
  listedProperties Property[]      @relation("AgentProperties")
  replyReactions   ReplyReaction[]
  savedProperties  SavedProperty[]
  savedSearches    SavedSearch[]
  sessions         Session[]
  interests        Interest[]

  @@index([email])
  @@index([phone])
  @@index([username])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id         String     @id @default(cuid())
  country    String
  state      String
  city       String
  zipcode    String?
  locality   String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  projects   Project[]
  properties Property[]

  @@index([country, state, city])
  @@index([zipcode])
}

model Builder {
  id             String    @id @default(cuid())
  name           String
  description    String?
  logoUrl        String?
  contactInfo    Json?
  website        String?
  builderDetails Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  projects       Project[]
  properties     Property[] @relation("BuilderProperties")

  @@index([name])
}

model Project {
  id            String      @id @default(cuid())
  builderId     String
  locationId    String
  name          String
  description   String
  type          ProjectType
  numberOfUnits Int?
  size          Float?
  density       Float?
  googlePin     String?
  thumbnailUrl  String?
  imageUrls     String[]
  projectDetails Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  builder       Builder     @relation(fields: [builderId], references: [id], onDelete: Cascade)
  location      Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)
  properties    Property[]
  interests     Interest[]

  @@index([builderId])
  @@index([locationId])
  @@index([type])
}

model Property {
  id             String          @id @default(cuid())
  streetAddress  String
  locationId     String
  projectId      String?
  builderId      String?
  userId         String
  postedBy       String
  postedDate     DateTime        @default(now())
  propertyDetails Json
  propertyType   PropertyType
  sqFt           Float?
  thumbnailUrl   String?
  imageUrls      String[]
  thumbnailIndex Int             @default(0)
  listingStatus  ListingStatus   @default(ACTIVE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  builder        Builder?        @relation("BuilderProperties", fields: [builderId], references: [id])
  location       Location        @relation(fields: [locationId], references: [id], onDelete: Cascade)
  project        Project?        @relation(fields: [projectId], references: [id])
  user           User            @relation("AgentProperties", fields: [userId], references: [id], onDelete: Cascade)
  images         PropertyImage[]
  savedBy        SavedProperty[]
  interests      Interest[]

  @@index([builderId])
  @@index([locationId])
  @@index([projectId])
  @@index([userId])
  @@index([propertyType])
  @@index([listingStatus])
}

model PropertyImage {
  id           String   @id @default(cuid())
  propertyId   String
  imageUrl     String
  altText      String?
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId, displayOrder])
}

model SavedProperty {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String
  name        String
  searchQuery Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interest {
  id         String    @id @default(cuid())
  userId     String
  projectId  String?
  propertyId String?
  message    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@unique([userId, propertyId])
  @@index([userId])
  @@index([projectId])
  @@index([propertyId])
}

model ForumCategory {
  id           String             @id @default(cuid())
  name         String             @unique
  slug         String             @unique
  description  String?
  parentId     String?
  city         String?
  propertyType ForumPropertyType?
  displayOrder Int                @default(0)
  isActive     Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  parent       ForumCategory?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     ForumCategory[]    @relation("CategoryHierarchy")
  posts        ForumPost[]

  @@index([slug])
  @@index([parentId])
  @@index([city])
  @@index([displayOrder])
}

model ForumPost {
  id          String         @id @default(cuid())
  title       String
  content     String
  slug        String         @unique
  categoryId  String
  authorId    String
  isSticky    Boolean        @default(false)
  isLocked    Boolean        @default(false)
  viewCount   Int            @default(0)
  replyCount  Int            @default(0)
  lastReplyAt DateTime?
  lastReplyBy String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    ForumCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  replies     ForumReply[]
  reactions   PostReaction[]

  @@index([categoryId])
  @@index([authorId])
  @@index([createdAt])
  @@index([lastReplyAt])
  @@index([slug])
}

model ForumReply {
  id        String          @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    ForumReply?     @relation("ReplyHierarchy", fields: [parentId], references: [id])
  children  ForumReply[]    @relation("ReplyHierarchy")
  post      ForumPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  reactions ReplyReaction[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
}

model PostReaction {
  id        String       @id @default(cuid())
  postId    String
  userId    String
  type      ReactionType
  createdAt DateTime     @default(now())
  post      ForumPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type])
  @@index([postId])
  @@index([userId])
}

model ReplyReaction {
  id        String       @id @default(cuid())
  replyId   String
  userId    String
  type      ReactionType
  createdAt DateTime     @default(now())
  reply     ForumReply   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([replyId, userId, type])
  @@index([replyId])
  @@index([userId])
}

enum UserRole {
  BUYER
  SELLER
  AGENT
  ADMIN
}

enum PropertyType {
  SINGLE_FAMILY
  CONDO
  TOWNHOUSE
  MULTI_FAMILY
  LAND
  COMMERCIAL
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  OFF_MARKET
  DRAFT
}

enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  MIXED_USE
  INDUSTRIAL
}

enum ReactionType {
  THANKS
  LAUGH
  CONFUSED
  SAD
  ANGRY
  LOVE
}

enum ForumPropertyType {
  VILLAS
  APARTMENTS
  RESIDENTIAL_LANDS
  AGRICULTURE_LANDS
  COMMERCIAL_PROPERTIES
}
