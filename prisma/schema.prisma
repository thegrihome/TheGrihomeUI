generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  username         String    @unique
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  isEmailVerified  Boolean   @default(false)
  image            String?
  password         String?
  phone            String?
  mobileNumber     String?   @unique
  isMobileVerified Boolean   @default(false)
  role             UserRole  @default(BUYER)
  isAgent          Boolean   @default(false)
  licenseNumber    String?   // For real estate agents
  companyName      String?   // Company name for agents
  imageLink        String?   // CDN URL for company logo
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  listedProperties Property[] @relation("AgentProperties")
  savedProperties  SavedProperty[]
  savedSearches    SavedSearch[]
  
  @@index([isAgent])
  @@index([email])
  @@index([username])
  @@index([mobileNumber])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Real Estate Models
model Property {
  id             String            @id @default(cuid())
  address        String
  city           String
  state          String
  zipCode        String
  country        String            @default("USA")
  latitude       Float?
  longitude      Float?
  price          Decimal           @db.Decimal(12, 2)
  bedrooms       Int
  bathrooms      Decimal           @db.Decimal(3, 1)
  squareFeet     Int?
  lotSize        Decimal?          @db.Decimal(10, 2)
  yearBuilt      Int?
  propertyType   PropertyType
  listingStatus  ListingStatus     @default(ACTIVE)
  description    String?           @db.String
  features       String[]          // Array of property features
  agentId        String
  listingDate    DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  agent           User              @relation("AgentProperties", fields: [agentId], references: [id])
  images          PropertyImage[]
  savedBy         SavedProperty[]
  
  // Optimized indexes for common real estate queries
  @@index([city, state, listingStatus]) // Location + status filter
  @@index([price, propertyType, listingStatus]) // Price range + type filter
  @@index([propertyType, bedrooms, bathrooms]) // Property specs filter
  @@index([listingStatus, listingDate]) // Recent listings
  @@index([agentId, listingStatus]) // Agent's active listings
  @@index([zipCode, price]) // Neighborhood price searches
  @@index([latitude, longitude]) // Geospatial searches (if needed)
}

model PropertyImage {
  id           String   @id @default(cuid())
  propertyId   String
  imageUrl     String
  altText      String?
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@index([propertyId, displayOrder])
}

model SavedProperty {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, propertyId])
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String
  name        String
  searchQuery Json     // Store search parameters as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  BUYER
  SELLER
  AGENT
  ADMIN
}

enum PropertyType {
  SINGLE_FAMILY
  CONDO
  TOWNHOUSE
  MULTI_FAMILY
  LAND
  COMMERCIAL
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  OFF_MARKET
  DRAFT
}