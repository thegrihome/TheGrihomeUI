generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  phone            String?         @unique
  role             UserRole        @default(BUYER)
  licenseNumber    String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  accounts         Account[]
  listedProperties Property[]      @relation("AgentProperties")
  savedProperties  SavedProperty[]
  savedSearches    SavedSearch[]
  sessions         Session[]

  @@index([email])
  @@index([phone])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id            String          @id @default(cuid())
  address       String
  city          String
  state         String
  zipCode       String
  country       String          @default("USA")
  latitude      Float?
  longitude     Float?
  price         Decimal         @db.Decimal(12, 2)
  bedrooms      Int
  bathrooms     Decimal         @db.Decimal(3, 1)
  squareFeet    Int?
  lotSize       Decimal?        @db.Decimal(10, 2)
  yearBuilt     Int?
  propertyType  PropertyType
  listingStatus ListingStatus   @default(ACTIVE)
  description   String?
  features      String[]
  agentId       String
  listingDate   DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  agent         User            @relation("AgentProperties", fields: [agentId], references: [id])
  images        PropertyImage[]
  savedBy       SavedProperty[]

  @@index([city, state, listingStatus])
  @@index([price, propertyType, listingStatus])
  @@index([propertyType, bedrooms, bathrooms])
  @@index([listingStatus, listingDate])
  @@index([agentId, listingStatus])
  @@index([zipCode, price])
  @@index([latitude, longitude])
}

model PropertyImage {
  id           String   @id @default(cuid())
  propertyId   String
  imageUrl     String
  altText      String?
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId, displayOrder])
}

model SavedProperty {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String
  name        String
  searchQuery Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  BUYER
  SELLER
  AGENT
  ADMIN
}

enum PropertyType {
  SINGLE_FAMILY
  CONDO
  TOWNHOUSE
  MULTI_FAMILY
  LAND
  COMMERCIAL
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  OFF_MARKET
  DRAFT
}
