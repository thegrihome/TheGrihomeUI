generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String          @id @default(cuid())
  username         String          @unique
  name             String?
  email            String          @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  phone            String?         @unique
  mobileVerified   DateTime?
  role             UserRole        @default(BUYER)
  licenseNumber    String?
  companyName      String?         // Company name for agents
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  accounts         Account[]
  listedProperties Property[]      @relation("AgentProperties")
  savedProperties  SavedProperty[]
  savedSearches    SavedSearch[]
  sessions         Session[]

  @@index([email])
  @@index([phone])
  @@index([username])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Location Model
model Location {
  id        String    @id @default(cuid())
  country   String
  state     String
  city      String
  zipcode   String
  locality  String
  
  // Relations
  projects   Project[]
  properties Property[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([country, state, city])
  @@index([zipcode])
}

// Project Model
model Project {
  id            String      @id @default(cuid())
  locationId    String
  description   String
  type          ProjectType
  numberOfUnits Int
  size          Float       // area in sqft or acres
  density       Float       // units per acre or similar
  imageUrls     String[]    // Cloudflare images list (array of URLs)
  thumbnailUrl  String      // Direct thumbnail URL
  
  // Relations
  location   Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  properties Property[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([locationId])
  @@index([type])
}

model Property {
  id             String    @id @default(cuid())
  streetAddress  String
  locationId     String
  projectId      String?   // Optional relation to Project
  userId         String    // Owner/Agent who listed the property
  imageUrls      String[]  // Cloudflare images list (array of URLs)
  thumbnailIndex Int       @default(0) // index in the imageUrls array for the thumbnail
  
  // Relations
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  project  Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  user     User     @relation("AgentProperties", fields: [userId], references: [id], onDelete: Cascade)
  
  // Additional relations (assuming these exist from your original schema)
  images   PropertyImage[]
  savedBy  SavedProperty[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([locationId])
  @@index([projectId])
  @@index([userId])
}

model PropertyImage {
  id           String   @id @default(cuid())
  propertyId   String
  imageUrl     String
  altText      String?
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId, displayOrder])
}

model SavedProperty {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String
  name        String
  searchQuery Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  BUYER
  SELLER
  AGENT
  ADMIN
}

enum PropertyType {
  SINGLE_FAMILY
  CONDO
  TOWNHOUSE
  MULTI_FAMILY
  LAND
  COMMERCIAL
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  OFF_MARKET
  DRAFT
}

enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  MIXED_USE
  INDUSTRIAL
}
